import tracemalloc
import time
t_start = time.perf_counter()
tracemalloc.start()


def pref(S):
    l = len(S)
    P = [0]*l
    i, j = 0, 1
    while j < l:
        if S[i] == S[j]:
            P[j] = i + 1
            i += 1
            j += 1
        elif i:
            i = P[i - 1]
        else:
            P[j] = 0
            j += 1
    return P


if __name__ == '__main__':
    file = open('input.txt')
    word = file.readline()
    result = list(map(str, pref(word)))
    file = open('output.txt', 'w')
    file.write(f'{" ".join(result[:-1])}')


print("Время работы (в секундах):", time.perf_counter()-t_start)
print("Память %d, и пик %d" % tracemalloc.get_traced_memory())

'''
Считываем строку и запускаем префикс-функцию (см. задание 3)
Задание 3: Считываем строку и подстроку и запускаем функцию  Кнутта-Морриса-Пратта. С помощью префикс функции мы считаем 
для каждого символа образа количество совпадений, то есть количество символов, на которые мы можем сдвинуть образ вдоль 
строки. Количество этих символов считается как количество префиксов и суффиксов подстроки одинаковой длины и равных по 
значению. То есть префикс-функция для i-ого символа образа возвращает значение, равное максимальной длине совпадающих 
префикса и суффикса подстроки в образе, которая заканчивается i-м символом. На выходе мы получаем массив образа. 
Затем проходим АКМП по строке. Индексы i и j указывают на начальные символы строки и образа. В случае совпадения 
символов мы сдвигаем оба индекса вправо на 1. В случае несовпадения мы обращаем внимание на символ в образе, 
предшествующий не совпавшему. Его значение в массиве образа является индексом того символа, который нужно сдвинуть 
на j-ый индекс. В случае совпадения записываем индекс начала.
'''

'''
aaaAAA
Result:
0 1 2 0 0 0
'''

'''
abacaba
Result:
0 0 1 0 1 2 3
'''
